apiVersion: template.openshift.io/v1
kind: Template
metadata:
  app: Etherpad
parameters:
  - name: ADMIN_PASSWORD
    description: Admin password for etherpad/admin
    required: true
    displayName: Autogenerated database password
    from: '[a-zA-Z0-9]{32}'
    generate: expression 

  - name: DB_NAME
    description: Database Name
    value: ether
    required: true

  - name: DB_USER
    description: Database User ID
    value: ether
    required: true

  - name: DB_PASS
    description: Database Password
    required: true
    displayName: Autogenerated database password
    from: '[a-zA-Z0-9]{32}'
    generate: expression 

objects:
- apiVersion: build.openshift.io/v1
  kind: BuildConfig
  metadata:
    name: etherpad
  spec:
    source:
      git:
        ref: develop
        uri: 'https://github.com/ether/etherpad-lite.git'
      type: Git
    strategy:
      type: Source
      dockerStrategy:
        env:
        - name: DB_TYPE
          value: postgres
        - name: DB_HOST
          value: postgresql
        - name: DB_PORT
          value: "5432"
        - name: DB_NAME
          value: ${DB_NAME}
        - name: DB_USER
          value: ${DB_USER}
        - name: DB_PASS
          value: ${DB_PASS}
        - name: ADMIN_PASSWORD
          value: ${ADMIN_PASSWORD}
    output:
      to:
        kind: ImageStreamTag
        name: etherpad:latest
    triggers:
      - type: ImageChange
      - type: ConfigChange

- apiVersion: v1
  kind: ImageStream
  metadata:
    annotations:
      description: Keeps track of changes in the application image
    name: etherpad

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: etherpad
    name: etherpad
  spec:
    replicas: 1
    selector:
      app: etherpad    
      deploymentconfig: etherpad
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: Rolling
    template:
      metadata:
        labels:
          app: etherpad
          deploymentconfig: etherpad
      spec:
        containers:
        - image: etherpad:latest
          imagePullPolicy: Always
          name: etherpad
          ports:
          - containerPort: 9001
            protocol: TCP
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
    test: false
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - etherpad
        from:
          kind: ImageStreamTag
          name: etherpad:latest
      type: ImageChange
  status: {}

- apiVersion: apps.openshift.io/v1
  kind: DeploymentConfig
  metadata:
    generation: 2
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      name: postgresql
    strategy:
      activeDeadlineSeconds: 21600
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          name: postgresql
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            valueFrom:
              secretKeyRef:
                key: database-user
                name: postgresql
          - name: POSTGRESQL_PASSWORD
            valueFrom:
              secretKeyRef:
                key: database-password
                name: postgresql
          - name: POSTGRESQL_DATABASE
            valueFrom:
              secretKeyRef:
                key: database-name
                name: postgresql
          image: image-registry.apps.2.rahti.csc.fi/openshift/postgresql:12-el8
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - /usr/libexec/check-container
              - --live
            failureThreshold: 3
            initialDelaySeconds: 120
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 10
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /usr/libexec/check-container
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 512Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /var/lib/psql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - name: postgresql-data
          persistentVolumeClaim:
            claimName: postgresql
    test: false
  status: {}

- apiVersion: v1
  kind: PersistentVolumeClaim
  metadata:
    finalizers:
    - kubernetes.io/pvc-protection
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    accessModes:
    - ReadWriteOnce
    resources:
      requests:
        storage: 10Gi
    storageClassName: standard-csi
  status: {}

- apiVersion: v1
  stringData:
    database-name: ether
    database-password: ${DB_PASS}
    database-user: ether
  kind: Secret
  metadata:
    labels:
      app: postgresql-persistent
    name: postgresql
  type: Opaque

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: etherpad
    name: etherpad
  spec:
    ports:
    - name: 9001-tcp
      port: 9001
      protocol: TCP
      targetPort: 9001
    selector:
      app: etherpad
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: v1
  kind: Service
  metadata:
    labels:
      app: postgresql-persistent
    name: postgresql
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      name: postgresql
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}

- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    labels:
      app: etherpad
    name: etherpad
  spec:
    host: ""
    port:
      targetPort: 9001-tcp
    to:
      kind: Service
      name: etherpad
      weight: 100
    wildcardPolicy: None
  status: {}
